- Loading Jquery
	Though download and storage inside a folder within the website. Then, the
HTML links that file within the document.
	The link can be made though internet using Google CDN to make the HTML
load faster.
<script src="https://ajax.googleaps.com/ajax/libs/jquery/1.11.2/jquery.min.js">
</script>

- Selecting HTML elements
$("*") -> select all elements
$(x).css(propertie, value) -> change the propertie to value to x element
$("p") -> select all paragraphs
$("div > p") -> select all paragraphs inside divs
$("div ~ p") -> select all paragraphs outside divs
$("#great") -> select the HTML element with id equals to "great"
$(".orange") -> select all the elements that has the class equals to orange
$("div.bluebox") -> select all the div with the class equals to "bluebox"
$("x:first-child") -> select first child of the x element
$("x:last-child") -> select last child of the x element
$("[href]") -> select all elements with a href propertie
$("tr:even") -> select all the even rows from tr
$("tr:odd") -> select all the odd rows from tr
$(":input") -> select all the input from the page
$(":Submit") -> select all the buttons submit from the page
$("div:has(table)") -> select all the divs that has a table tag

- Respond to events
$("p").click(function() {}) -> action for the click in the paragraphs elements
$(this) -> represents the elements that received the element
$("p").mouseover(function() {}) -> action for the mouseover for the paragraph
$("p").mouseout(function() {}) -> action when the mouse go out of the element
$("input").focus(function() {}) -> action when the input has the focus
$("input").blur(function() {}) -> action when the input leave the focus
$("input").keyup(function() {}) -> action when user type something
$("#input").val() -> change the value for the element with id equals to "input"

- Change HTML content and attributes
$(x).text() -> change the content of the x element
$(x).html() -> change the html of the x element
$(x).attr({"y" : "z", ... }) -> change the attribute y to value z and so on
$(x).append(param) -> add param into x element content at the end
$(x).prepend(param) -> add param into x element content at the beginning
$(x).after(param) -> add param after the x element content
$(x).before(param) -> add param before the x element content
$(x).addClass(param) -> add the class propertie into the x element
$(x).innerHeight() -> get the innerHeight propertie from x element
$(x).outerHeight() -> get the outerHeight (body + padding) propertie from the x element
$(x).removeClass(param) -> removes the class propertie from the x element
$(x).toggleClass(param) -> add or remove param class to the x element
$(x).hide() -> change the display to none of the x element
$(x).wrap(param) -> Wrap the x element inside the param tag
$(x).find("p") -> Find the "p" tag in x element

- JQuery Effects
$(x).fadeOut(time, function() {}) -> fade out effect until disappear within time and execute function when the fadeOut finishes.
$(x).fadeIn() -> fade in effect until disappear within time and execute function when the fadeOut finishes.
$(x).fadeToggle(duration) -> Toggle the fade effect of the x element during the durantion time in miliseconds.
$(x).animate({propertie:'value', ...}, duration) -> Animate x element changing the propertie to value
$(x).delay(time).animate({propertie:'value', ...}, duration) -> Animate x element changing the propertie to value after the time delay

- AJAX
$(x).load(fileLocation) -> Use ajax to load the fileLocation
$(x).load("ajax/somedata.txt #paragraph1"); -> load only element with id equals to paragraph1 into the x element
$(x).click(function() {
	$.ajax({
		url : "ajax/somedata.txt",
		success : function(data) {
			$("#microsoft").html(data);
		}
	});
})

$(x).click(function() {
	$.ajax({url : "ajax/somedata.txt",}).done(function(data) {
		$("#microsoft").html(data);
	});
})

- JQuery UI Introduction
Call the style of the jquery theme the same way as the jquery basic functions.
You can change the theme altering the name of the folder after "theme/".
Get the page as the UI adding the commom classes as properties of the tags used within the page.
Examples: ui-corner-all and ui-state-error
$(x).draggable() -> make the x element draggable by the user
$(x).draggable({
	axis: "y" | "x" -> permission to drag in this direction
	revert: true -> get to the previous state after drop the element
	start: function () { -> action to do when the drag start
		$(y).css("background-color", "#682DAE")
	},
	drag: function () { -> action to do when dragging element
		$(y)[...]
	},
	stop: function () { -> action to do when dragging stops
		$(y)[...]
	}
})
$(x).droppable({ -> Make x droppable
	drop: function() { -> Action to do when something is dropped within
		$(this).[...]
	}
	accept: "#id1", -> Acceptable elemnts to drop
	helper: "clone", ->
	appendTo: "body" -> Which elements will append
})
$(x).droppable({ -> Make x droppable
	drop: function(event, ui) {
		$("<p></p>").text(ui.draggable.text()).appentTo(this);
		$("<li></li>").text(ui.draggable.text()).appentTo(this);
	}
})
$(x).resizable(); -> Make the x element resizable
$(x).resizable({
	maxHeight 200,
	minHeight: 50,
	maxWidth: 300,
	aspectRadio: 4/3, -> maintain the same aspect radio
	ghost: true, -> set the animation of a shadow of resize enabled
	containment: id, -> resize within the element with that id
	animate: true, -> add the animation when resized
	alsoResize: id -> which other element will be resized when x is resized
	resize: function () { -> Action when resized
		$(y).accordion("refresh"); -> refresh the accordion properties
	}
});
$(x).selectable(); -> Make the x element selectable using class (ui-selecting / ui-selected)
$(x).selectable({
	stop: function() { -> Action when the selecting stops
		$(".ui-selected").each(function() {
			$("<p></p>").text.($(this).text()).appendTo("#microsoft");
		})
	}
});
$(x).sortable(); -> Make the x element sortable (change elements in a ul tag, for example)
$(x).sortable({
	placeholder: "ui-state-highlight", -> make a placeholder when moving the item
	cancel: ".notSortable", -> Set a class to not sortable items

});
$(x, y).sortable({
	connectWith: ".connectWith" -> Make the items of x y interchangable
-> Make sure the style of x and y has a minimum height for them to exist, even with no items
})
$(x).accordion(); -> Make element x an accordion with heading and paragraphs, for instance
$(x).accordion({
	collapsible: true, -> make sure the all x elements are collapsible
	icons: { -> change the tick icons (normal or active) using jquery ui
		header: "ui-icon-circle-arrow-e",
		activeHeader: "ui-icon-circle-arrow-s"
	},
	heightStyle: "content", -> set the height of the accordion according to the height of the content
	heightStyle: "fill" -> another type of height setting
});
****************INPUT AUTOCOMPLETE****************
<style>
	.ui-autocomplete{
		max-height: 100px;
		overflow-y: auto;
	}
	#city{
		width: 200px;
	}
</style>
<p>Input the city: <input id="city"></p>
$("city").autocomplete({
	source: ["London", "Paris", "Brussels", "Madrid"]
});
****************INPUT AUTOCOMPLETE****************
$(x).button();
$(x).button({
	icons: {
		primary: "left",
		secondary: "right"
	},
	text: false
});
$(x).buttonset(); -> modify the style of checkboxes or radio buttons
****************DATA*PICKER****************
$(x).datepicker();
$(x).datepicker({
	showAnim: "slideDown" -> "drop" / "fadeIn"
	changeYear: true,
	numberOfMonths: 2, -> number of months to show at the same time
	dateFormat: "mm/dd/yy", -> "m/d/y" (3/2/15)
	showOn: "button", -> button to show the datepicker
	buttonImage: "images/calendar.png",
	buttonImageOnly: true, -> set the image with no button layout
	minDate: +1, -> The minimum date is tomorrow
	maxDate: "+12M +10D", -> The maximum date is after 12 months and 10 days
	onClose: function(selectedDate) { -> what to do when the datepicker closes
		$(y).datepicker("option", "minDate", selectedDate);
	}
});
****************DATA*PICKER****************
******************DIALOGS******************
$(x).dialog(); -> Show a dialog with a title inside de tag
$(x).dialog({
	autoOpen: false, -> no show when page loads
	modal: true, ->
	buttons: {
		"Go to previous page" : function(){
			window.history.back();
		},
		"Cancel" : function(){
			$(this).dialog("close");
		}
	}
});
$(x).dialog("open"); -> Opens the dialog
******************DIALOGS******************
********************MENU*******************
$(x).menu(); -> Change a ul tag into a menu
********************MENU*******************
**************PROGRESS*BARS****************
$(x).progressbar(); -> change a div into a progress bar
$(x).progressbar({
	value: 25 -> set the progress to 25%
});
-----Example:-----
<div id="progress">
	<div id="label"></div>
</div>
<button>Run</button>
$("progress").progressbar();
var x = 0;
$("button").click(function(){
	$("#label").text("In progress ...");
	var progress = setInterval(function(){
		x++;
		$("#label").text(x + '%');
		$("#progress").progressbar("option", "value", x);
		if (x > 99) {
			clearInterval(progress);
		}
	}, 100);
})
**************PROGRESS*BARS****************
***************SELECT*MENU*****************
$(x).selectmenu(); -> make a select and option tags into a dropdown list
***************SELECT*MENU*****************
*****************SLIDER********************
$(x).slider(); -> transform a div tag into a slider input
$(x).slider({
	slide: function(event, ui){
		$(y).val(ui.value); -> put the value of x into an input y
		$(y).val(ui.values[0] + ' - ' + ui.values[1]); -> if using range, get the min and max values
	},
	min: 0, -> min value
	max: 25, -> max value
	range: true, -> change one input into two inputs for the minimum and maximum
	values: [0, 25], -> start values
	step: 5 -> set the each tick of the slider
});
$(y).val($(x).slider("values", 0) + ' - ' + $(x).slider("values", 1));
*****************SLIDER********************
***********SPINNER*TABS*TOOLTIPS***********
------SPINNER------
$(x).spinner() -> change an input into a spinner
$(x).spinner({
	min: 0,
	max: 100,
	step: 5
});
------TABS------
<div id="container">
<ul>
<li><a href="#tab1">tab1</a></li>
<li><a href="#tab1">tab1</a></li>
</ul>
<div id="tab1"><p>Content 1</p></div>
<div id="tab1"><p>Content 1</p></div>
</div>
$("container").tabs() -> x is a container div with ul li tags and divs inside
$("container").tabs({
	collapsible: true, -> make tabs collapsible
	event: "mouseover", -> show contents of the tab on mouseover
}).find(".ui-tabs-nav").sortable({ -> make the tabs sortible
	axis: "x"
});
------TOOLTIP------
$(x).tooltip({ -> make the tag x with the property 'title' will be with a tooltip
	show: {effect: "explode"}
	show: {effect: "slideDown"}
});
$(document).tooltip(); -> all the tags with title property will get a tooltip
***********SPINNER*TABS*TOOLTIPS***********
